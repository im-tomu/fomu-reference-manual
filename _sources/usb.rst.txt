USB
===

USB Device Tri-FIFO
-------------------

This is a three-FIFO USB device.  It presents one FIFO each for ``IN``, ``OUT``, and
``SETUP`` data.  This allows for up to 16 ``IN`` and 16 ``OUT`` endpoints
without sacrificing many USB resources.

USB supports four types of transfers: control, bulk, interrupt, and isochronous.
This device does not yet support isochronous transfers, however it supports the
other types of transfers.  It contains special logic for handing control transfers,
including the handshake that is required.


Control Transfers
-----------------

Control transfers are complicated, and are the first sort of transfer that
the host uses.  Such transfers have three distinct phases.

The first phase is the ``SETUP`` phase, where the host sends an 8-byte ``SETUP``
packet.  These ``SETUP`` packets must always be acknowledged, so any such packet
from the host will get loaded into a ``SETUP`` buffer immediately, and an interrupt
event raised.  If, for some reason, the device hasn't drained this ``SETUP``
buffer, the buffer will be cleared automatically.

Following the ``SETUP`` phase is an ``IN`` or ``OUT`` packet.  This packet will
be delayed by responding with ``NAK`` until the device acknowledges receipt
of the ``SETUP`` packet.  To acknowledge receipt, set the ``SETUP_CTRL.HANDLED``
bit.

Once the ``SETUP`` packet is handled, the host will send an ``IN`` or ``OUT``
packet.  If the host sends an ``OUT`` packet, then the ``OUT`` buffer must be
cleared and the ``OUT_CTRL.ENABLE`` bit must be set.  The device will not
accept any data as long as these two conditions are not met.

If the host sends an ``IN`` packet, the device will respond with ``NAK`` if
no data has queued.  To queue data, fill the ``IN.DATA`` buffer, then write
``0`` to ``IN.CTRL``.

You can continue to fill the buffer (for ``IN`` packets) or drain the buffer
and re-enable the endpoint (for ``OUT`` packets) until the host has finished
the transfer.

When the host has finished, it will send the opposite packet type.  If it
is making ``IN`` transfers, it will send a single ``OUT`` packet, or if it
is making ``OUT`` transfers it will send a single ``IN`` packet.
`TriEndpointInterface` will automatically handle this final packet.

Stalling an Endpoint
^^^^^^^^^^^^^^^^^^^^

When the host sends a request that cannot be processed -- for example requesting
a descriptor that does not exist -- the device must respond with ``STALL``.

Each endpoint keeps track of its own ``STALL`` state, though a ``SETUP`` packet
will clear the ``STALL`` state.

To set or clear the ``STALL`` bit of an endpoint, write its endpoint number
to ``IN_CTRL.EPNO`` with the ``IN_CTRL.STALL`` bit either set or clear.  If
this bit is set, then the device will respond to the next ``IN`` packet from the
host to that particular endpoint with ``STALL``.  If the bit is clear, then
the next ``IN`` packet will be responded to with ``ACK`` and the contents of
the ``IN`` FIFO.


USB Wishbone Bridge
-------------------

This bridge provides a transparent bridge to the target device's Wishbone bus over USB.
It can operate without interfering with the device's USB stack.  It is simple enough to
be able to work even if the USB stack is not enumerated, though the host may not cooperate.

USB Wishbone Debug Protocol
---------------------------

The protocol transfers four bytes a time in big-endian (i.e. USB) order.  It uses SETUP packets
with the special type (0x43) as an `attention` word.  This is then followed by an ``OUT`` packet.

    .. wavedrom::
        :caption: Write to Wishbone

        { "signal": [
            ["Request",
                {  "name": 'data',        "wave": 'x222...22x', "data": '0x43 0x00 [ADDRESS] 0x04 0x00'   },
                {  "name": 'data bits',   "wave": 'xxx2222xxx', "data": '7:0 15:8 23:16 31:24'},
                {  "name": 'usb meaning', "wave": 'x222.2.2.x', "data": 'bReq bTyp wValue wIndex wLength' },
                {  "name": 'usb byte',    "wave": 'x22222222x', "data": '1 2 3 4 5 6 7 8'                 }
            ],
            {},
            ["Payload",
                {  "name": 'data',        "wave": 'x3...x', "data": '[DATA]'},
                {  "name": 'data bits',   "wave": 'x3333x', "data": '7:0 15:8 23:16 31:24'},
                {  "name": 'usb meaning', "wave": 'x3...x', "data": 'OUT'  },
                {  "name": 'usb byte',    "wave": 'x3333x', "data": '1 2 3 4'}
            ]
        ]}

To read data from the device, set the top bit of the `bRequestType`, followed by an ``IN`` packet.

    .. wavedrom::
        :caption: Read from Wishbone

        { "signal": [
            ['Request',
                {  "name": 'data',        "wave": 'x222...22x', "data": '0xC3 0x00 [ADDRESS] 0x04 0x00'   },
                {  "name": 'data bits',   "wave": 'xxx2222xxx', "data": '7:0 15:8 23:16 31:24'},
                {  "name": 'usb meaning', "wave": 'x222.2.2.x', "data": 'bReq bTyp wValue wIndex wLength' },
                {  "name": 'usb byte',    "wave": 'x22222222x', "data": '1 2 3 4 5 6 7 8'                 }
            ],
            {},
            ["Payload",
                {  "name": 'data',        "wave": 'x5...x', "data": '[DATA]'},
                {  "name": 'data bits',   "wave": 'x5555x', "data": '7:0 15:8 23:16 31:24'},
                {  "name": 'usb meaning', "wave": 'x5...x', "data": 'IN'  },
                {  "name": 'usb byte',    "wave": 'x5555x', "data": '1 2 3 4'}
            ]
        ]}


Register Listing for USB
------------------------

+----------------------+----------------+
| Register             | Address        |
+======================+================+
| USB_PULLUP_OUT       | ``0xe0004800`` |
+----------------------+----------------+
| USB_SETUP_DATA       | ``0xe0004804`` |
+----------------------+----------------+
| USB_SETUP_CTRL       | ``0xe0004808`` |
+----------------------+----------------+
| USB_SETUP_STATUS     | ``0xe000480c`` |
+----------------------+----------------+
| USB_SETUP_EV_STATUS  | ``0xe0004810`` |
+----------------------+----------------+
| USB_SETUP_EV_PENDING | ``0xe0004814`` |
+----------------------+----------------+
| USB_SETUP_EV_ENABLE  | ``0xe0004818`` |
+----------------------+----------------+
| USB_IN_DATA          | ``0xe000481c`` |
+----------------------+----------------+
| USB_IN_STATUS        | ``0xe0004820`` |
+----------------------+----------------+
| USB_IN_CTRL          | ``0xe0004824`` |
+----------------------+----------------+
| USB_IN_EV_STATUS     | ``0xe0004828`` |
+----------------------+----------------+
| USB_IN_EV_PENDING    | ``0xe000482c`` |
+----------------------+----------------+
| USB_IN_EV_ENABLE     | ``0xe0004830`` |
+----------------------+----------------+
| USB_OUT_DATA         | ``0xe0004834`` |
+----------------------+----------------+
| USB_OUT_STATUS       | ``0xe0004838`` |
+----------------------+----------------+
| USB_OUT_CTRL         | ``0xe000483c`` |
+----------------------+----------------+
| USB_OUT_STALL        | ``0xe0004840`` |
+----------------------+----------------+
| USB_OUT_EV_STATUS    | ``0xe0004844`` |
+----------------------+----------------+
| USB_OUT_EV_PENDING   | ``0xe0004848`` |
+----------------------+----------------+
| USB_OUT_EV_ENABLE    | ``0xe000484c`` |
+----------------------+----------------+
| USB_ADDRESS          | ``0xe0004850`` |
+----------------------+----------------+

USB_PULLUP_OUT
^^^^^^^^^^^^^^

**Address: 0xe0004800 + 0x0 = 0xe0004800**


    .. wavedrom::
        :caption: USB_PULLUP_OUT

        {
            "reg": [
                {"name": "pullup_out",  "bits": 1},
                {"bits": 7},
            ], "config": {"hspace": 400, "bits": 8, "lanes": 1 }, "options": {"hspace": 400, "bits": 8, "lanes": 1}
        }


USB_SETUP_DATA
^^^^^^^^^^^^^^

**Address: 0xe0004800 + 0x4 = 0xe0004804**

    Data from the last `SETUP` transactions.  It will be 10 bytes long, because                         it will include the CRC16.  This is a FIFO, and the queue is advanced automatically.

    .. wavedrom::
        :caption: USB_SETUP_DATA

        {
            "reg": [
                {"name": "data",  "bits": 8}
            ], "config": {"hspace": 400, "bits": 8, "lanes": 1 }, "options": {"hspace": 400, "bits": 8, "lanes": 1}
        }


+-------+------+-----------------------------+
| Field | Name | Description                 |
+=======+======+=============================+
| [7:0] | DATA | The next byte of SETUP data |
+-------+------+-----------------------------+

USB_SETUP_CTRL
^^^^^^^^^^^^^^

**Address: 0xe0004800 + 0x8 = 0xe0004808**

    Controls for managing how to handle `SETUP` transactions.

    .. wavedrom::
        :caption: USB_SETUP_CTRL

        {
            "reg": [
                {"bits": 1},
                {"name": "handled",  "type": 4, "bits": 1},
                {"name": "reset",  "type": 4, "bits": 1},
                {"bits": 5}
            ], "config": {"hspace": 400, "bits": 8, "lanes": 1 }, "options": {"hspace": 400, "bits": 8, "lanes": 1}
        }


+-------+---------+------------------------------------------------------+
| Field | Name    | Description                                          |
+=======+=========+======================================================+
| [1]   | HANDLED | Write a `1` here to indicate SETUP has been handled. |
+-------+---------+------------------------------------------------------+
| [2]   | RESET   | Write a `1` here to reset the `SETUP` handler.       |
+-------+---------+------------------------------------------------------+

USB_SETUP_STATUS
^^^^^^^^^^^^^^^^

**Address: 0xe0004800 + 0xc = 0xe000480c**

    Status about the most recent `SETUP` transactions, and the state of the FIFO.

    .. wavedrom::
        :caption: USB_SETUP_STATUS

        {
            "reg": [
                {"name": "have",  "bits": 1},
                {"name": "is_in",  "bits": 1},
                {"name": "epno",  "bits": 4},
                {"name": "pend",  "bits": 1},
                {"name": "data",  "bits": 1}
            ], "config": {"hspace": 400, "bits": 8, "lanes": 1 }, "options": {"hspace": 400, "bits": 8, "lanes": 1}
        }


+-------+-------+-----------------------------------------------------------+
| Field | Name  | Description                                               |
+=======+=======+===========================================================+
| [0]   | HAVE  | `1` if there is data in the FIFO.                         |
+-------+-------+-----------------------------------------------------------+
| [1]   | IS_IN | `1` if an IN stage was detected.                          |
+-------+-------+-----------------------------------------------------------+
| [5:2] | EPNO  | The destination endpoint for the most recent SETUP token. |
+-------+-------+-----------------------------------------------------------+
| [6]   | PEND  | `1` if there is an IRQ pending.                           |
+-------+-------+-----------------------------------------------------------+
| [7]   | DATA  | `1` if a DATA stage is expected.                          |
+-------+-------+-----------------------------------------------------------+

USB_SETUP_EV_STATUS
^^^^^^^^^^^^^^^^^^^

**Address: 0xe0004800 + 0x10 = 0xe0004810**

    This register contains the current raw level of the Event trigger.  Writes to this register have no effect.

    .. wavedrom::
        :caption: USB_SETUP_EV_STATUS

        {
            "reg": [
                {"name": "ready",  "bits": 1},
                {"bits": 7}
            ], "config": {"hspace": 400, "bits": 8, "lanes": 1 }, "options": {"hspace": 400, "bits": 8, "lanes": 1}
        }


+-------+-------+----------------------------+
| Field | Name  | Description                |
+=======+=======+============================+
| [0]   | READY | Level of the `ready` event |
+-------+-------+----------------------------+

USB_SETUP_EV_PENDING
^^^^^^^^^^^^^^^^^^^^

**Address: 0xe0004800 + 0x14 = 0xe0004814**

    When an Event occurs, the corresponding bit will be set in this register.  To clear the Event, set the corresponding bit in this register.

    .. wavedrom::
        :caption: USB_SETUP_EV_PENDING

        {
            "reg": [
                {"name": "ready",  "bits": 1},
                {"bits": 7}
            ], "config": {"hspace": 400, "bits": 8, "lanes": 1 }, "options": {"hspace": 400, "bits": 8, "lanes": 1}
        }


+-------+-------+----------------------------------------------------------------------------+
| Field | Name  | Description                                                                |
+=======+=======+============================================================================+
| [0]   | READY | Indicates a `SETUP` packet has arrived and is waiting in the `SETUP` FIFO. |
+-------+-------+----------------------------------------------------------------------------+

USB_SETUP_EV_ENABLE
^^^^^^^^^^^^^^^^^^^

**Address: 0xe0004800 + 0x18 = 0xe0004818**

    This register enables the corresponding Events.  Write a `0` to this register to disable individual events.

    .. wavedrom::
        :caption: USB_SETUP_EV_ENABLE

        {
            "reg": [
                {"name": "ready",  "bits": 1},
                {"bits": 7}
            ], "config": {"hspace": 400, "bits": 8, "lanes": 1 }, "options": {"hspace": 400, "bits": 8, "lanes": 1}
        }


+-------+-------+-----------------------------------------+
| Field | Name  | Description                             |
+=======+=======+=========================================+
| [0]   | READY | Write a `1` to enable the `ready` Event |
+-------+-------+-----------------------------------------+

USB_IN_DATA
^^^^^^^^^^^

**Address: 0xe0004800 + 0x1c = 0xe000481c**

    Each byte written into this register gets added to an outgoing FIFO. Any                         bytes that are written here will be transmitted in the order in which                         they were added.  The FIFO queue is automatically advanced with each write.                         The FIFO queue is 64 bytes deep.  If you exceed this amount, the result is undefined.

    .. wavedrom::
        :caption: USB_IN_DATA

        {
            "reg": [
                {"name": "data",  "bits": 8}
            ], "config": {"hspace": 400, "bits": 8, "lanes": 1 }, "options": {"hspace": 400, "bits": 8, "lanes": 1}
        }


+-------+------+------------------------------------+
| Field | Name | Description                        |
+=======+======+====================================+
| [7:0] | DATA | The next byte to add to the queue. |
+-------+------+------------------------------------+

USB_IN_STATUS
^^^^^^^^^^^^^

**Address: 0xe0004800 + 0x20 = 0xe0004820**

    Status about the IN handler.  As soon as you write to `IN_DATA`,                         `IN_STATUS.HAVE` should go to `1`.

    .. wavedrom::
        :caption: USB_IN_STATUS

        {
            "reg": [
                {"name": "have",  "bits": 1},
                {"name": "idle",  "bits": 1},
                {"bits": 5},
                {"name": "pend",  "bits": 1}
            ], "config": {"hspace": 400, "bits": 8, "lanes": 1 }, "options": {"hspace": 400, "bits": 8, "lanes": 1}
        }


+-------+------+------------------------------------------------------------+
| Field | Name | Description                                                |
+=======+======+============================================================+
| [0]   | HAVE | This value is '0' if the FIFO is empty.                    |
+-------+------+------------------------------------------------------------+
| [1]   | IDLE | This value is '1' if the packet has finished transmitting. |
+-------+------+------------------------------------------------------------+
| [7]   | PEND | `1` if there is an IRQ pending.                            |
+-------+------+------------------------------------------------------------+

USB_IN_CTRL
^^^^^^^^^^^

**Address: 0xe0004800 + 0x24 = 0xe0004824**

    Enables transmission of data in response to `IN` tokens, or resets                         the contents of the FIFO.

    .. wavedrom::
        :caption: USB_IN_CTRL

        {
            "reg": [
                {"name": "ep",  "bits": 4},
                {"name": "stall",  "type": 4, "bits": 1},
                {"name": "reset",  "type": 4, "bits": 1},
                {"bits": 2}
            ], "config": {"hspace": 400, "bits": 8, "lanes": 1 }, "options": {"hspace": 400, "bits": 8, "lanes": 1}
        }


+-------+-------+---------------------------------------------------------------------+
| Field | Name  | Description                                                         |
+=======+=======+=====================================================================+
| [3:0] | EP    | The endpoint number for the transaction that is queued in the FIFO. |
+-------+-------+---------------------------------------------------------------------+
| [4]   | STALL | Write a 1 here to stall the EP written in `EP`.                     |
+-------+-------+---------------------------------------------------------------------+
| [5]   | RESET | Write a 1 here to clear the contents of the FIFO.                   |
+-------+-------+---------------------------------------------------------------------+

USB_IN_EV_STATUS
^^^^^^^^^^^^^^^^

**Address: 0xe0004800 + 0x28 = 0xe0004828**

    This register contains the current raw level of the Event trigger.  Writes to this register have no effect.

    .. wavedrom::
        :caption: USB_IN_EV_STATUS

        {
            "reg": [
                {"name": "done",  "bits": 1},
                {"bits": 7}
            ], "config": {"hspace": 400, "bits": 8, "lanes": 1 }, "options": {"hspace": 400, "bits": 8, "lanes": 1}
        }


+-------+------+---------------------------+
| Field | Name | Description               |
+=======+======+===========================+
| [0]   | DONE | Level of the `done` event |
+-------+------+---------------------------+

USB_IN_EV_PENDING
^^^^^^^^^^^^^^^^^

**Address: 0xe0004800 + 0x2c = 0xe000482c**

    When an Event occurs, the corresponding bit will be set in this register.  To clear the Event, set the corresponding bit in this register.

    .. wavedrom::
        :caption: USB_IN_EV_PENDING

        {
            "reg": [
                {"name": "done",  "bits": 1},
                {"bits": 7}
            ], "config": {"hspace": 400, "bits": 8, "lanes": 1 }, "options": {"hspace": 400, "bits": 8, "lanes": 1}
        }


+-------+------+-----------------------------------------------------------------------------------------------------+
| Field | Name | Description                                                                                         |
+=======+======+=====================================================================================================+
| [0]   | DONE | Indicates that the host has successfully transfered an `IN` packet, and that the FIFO is now empty. |
+-------+------+-----------------------------------------------------------------------------------------------------+

USB_IN_EV_ENABLE
^^^^^^^^^^^^^^^^

**Address: 0xe0004800 + 0x30 = 0xe0004830**

    This register enables the corresponding Events.  Write a `0` to this register to disable individual events.

    .. wavedrom::
        :caption: USB_IN_EV_ENABLE

        {
            "reg": [
                {"name": "done",  "bits": 1},
                {"bits": 7}
            ], "config": {"hspace": 400, "bits": 8, "lanes": 1 }, "options": {"hspace": 400, "bits": 8, "lanes": 1}
        }


+-------+------+----------------------------------------+
| Field | Name | Description                            |
+=======+======+========================================+
| [0]   | DONE | Write a `1` to enable the `done` Event |
+-------+------+----------------------------------------+

USB_OUT_DATA
^^^^^^^^^^^^

**Address: 0xe0004800 + 0x34 = 0xe0004834**

    Data received from the host will go into a FIFO.  This register                         reflects the contents of the top byte in that FIFO.  Reading from                         this register advances the FIFO pointer.

    .. wavedrom::
        :caption: USB_OUT_DATA

        {
            "reg": [
                {"name": "data",  "bits": 8}
            ], "config": {"hspace": 400, "bits": 8, "lanes": 1 }, "options": {"hspace": 400, "bits": 8, "lanes": 1}
        }


+-------+------+-----------------------------------+
| Field | Name | Description                       |
+=======+======+===================================+
| [7:0] | DATA | The top byte of the receive FIFO. |
+-------+------+-----------------------------------+

USB_OUT_STATUS
^^^^^^^^^^^^^^

**Address: 0xe0004800 + 0x38 = 0xe0004838**

    Status about the current state of the `OUT` endpoint.

    .. wavedrom::
        :caption: USB_OUT_STATUS

        {
            "reg": [
                {"name": "have",  "bits": 1},
                {"name": "idle",  "bits": 1},
                {"name": "epno",  "bits": 4},
                {"name": "pend",  "bits": 1},
                {"bits": 1}
            ], "config": {"hspace": 400, "bits": 8, "lanes": 1 }, "options": {"hspace": 400, "bits": 8, "lanes": 1}
        }


+-------+------+----------------------------------------------------------+
| Field | Name | Description                                              |
+=======+======+==========================================================+
| [0]   | HAVE | ``1`` if there is data in the FIFO.                      |
+-------+------+----------------------------------------------------------+
| [1]   | IDLE | ``1`` if the packet has finished receiving.              |
+-------+------+----------------------------------------------------------+
| [5:2] | EPNO | The destination endpoint for the most recent OUT packet. |
+-------+------+----------------------------------------------------------+
| [6]   | PEND | ``1`` if there is an IRQ pending.                        |
+-------+------+----------------------------------------------------------+

USB_OUT_CTRL
^^^^^^^^^^^^

**Address: 0xe0004800 + 0x3c = 0xe000483c**

    Controls for receiving packet data.

    .. wavedrom::
        :caption: USB_OUT_CTRL

        {
            "reg": [
                {"bits": 1},
                {"name": "enable",  "bits": 1},
                {"name": "reset",  "type": 4, "bits": 1},
                {"bits": 5}
            ], "config": {"hspace": 400, "bits": 8, "lanes": 1 }, "options": {"hspace": 400, "bits": 8, "lanes": 1}
        }


+-------+--------+---------------------------------------------+
| Field | Name   | Description                                 |
+=======+========+=============================================+
| [1]   | ENABLE | Write a ``1`` here to enable recieving data |
+-------+--------+---------------------------------------------+
| [2]   | RESET  | Write a ``1`` here to reset the OUT handler |
+-------+--------+---------------------------------------------+

USB_OUT_STALL
^^^^^^^^^^^^^

**Address: 0xe0004800 + 0x40 = 0xe0004840**

    Enables / disables STALL for a given endpoint

    .. wavedrom::
        :caption: USB_OUT_STALL

        {
            "reg": [
                {"name": "epno",  "bits": 4},
                {"name": "stall",  "bits": 1},
                {"bits": 3}
            ], "config": {"hspace": 400, "bits": 8, "lanes": 1 }, "options": {"hspace": 400, "bits": 8, "lanes": 1}
        }


+-------+-------+--------------------------------------------+
| Field | Name  | Description                                |
+=======+=======+============================================+
| [3:0] | EPNO  | The endpoint to update STALL status for    |
+-------+-------+--------------------------------------------+
| [4]   | STALL | ``1`` to enable STALL, ``0`` to disable it |
+-------+-------+--------------------------------------------+

USB_OUT_EV_STATUS
^^^^^^^^^^^^^^^^^

**Address: 0xe0004800 + 0x44 = 0xe0004844**

    This register contains the current raw level of the Event trigger.  Writes to this register have no effect.

    .. wavedrom::
        :caption: USB_OUT_EV_STATUS

        {
            "reg": [
                {"name": "done",  "bits": 1},
                {"bits": 7}
            ], "config": {"hspace": 400, "bits": 8, "lanes": 1 }, "options": {"hspace": 400, "bits": 8, "lanes": 1}
        }


+-------+------+---------------------------+
| Field | Name | Description               |
+=======+======+===========================+
| [0]   | DONE | Level of the `done` event |
+-------+------+---------------------------+

USB_OUT_EV_PENDING
^^^^^^^^^^^^^^^^^^

**Address: 0xe0004800 + 0x48 = 0xe0004848**

    When an Event occurs, the corresponding bit will be set in this register.  To clear the Event, set the corresponding bit in this register.

    .. wavedrom::
        :caption: USB_OUT_EV_PENDING

        {
            "reg": [
                {"name": "done",  "bits": 1},
                {"bits": 7}
            ], "config": {"hspace": 400, "bits": 8, "lanes": 1 }, "options": {"hspace": 400, "bits": 8, "lanes": 1}
        }


+-------+------+------------------------------------------------------------------------------------------------------------------+
| Field | Name | Description                                                                                                      |
+=======+======+==================================================================================================================+
| [0]   | DONE | Indicates that an                                                                                                |
|       |      |                                                                             ``OUT`` packet has successfully been |
|       |      |                                                                             transfered to the host.              |
+-------+------+------------------------------------------------------------------------------------------------------------------+

USB_OUT_EV_ENABLE
^^^^^^^^^^^^^^^^^

**Address: 0xe0004800 + 0x4c = 0xe000484c**

    This register enables the corresponding Events.  Write a `0` to this register to disable individual events.

    .. wavedrom::
        :caption: USB_OUT_EV_ENABLE

        {
            "reg": [
                {"name": "done",  "bits": 1},
                {"bits": 7}
            ], "config": {"hspace": 400, "bits": 8, "lanes": 1 }, "options": {"hspace": 400, "bits": 8, "lanes": 1}
        }


+-------+------+----------------------------------------+
| Field | Name | Description                            |
+=======+======+========================================+
| [0]   | DONE | Write a `1` to enable the `done` Event |
+-------+------+----------------------------------------+

USB_ADDRESS
^^^^^^^^^^^

**Address: 0xe0004800 + 0x50 = 0xe0004850**

    Sets the USB device address, in order to ignore packets                         going to other devices on the bus. This value is reset when the host                         issues a USB Device Reset condition.

    .. wavedrom::
        :caption: USB_ADDRESS

        {
            "reg": [
                {"name": "addr",  "bits": 7},
                {"bits": 1}
            ], "config": {"hspace": 400, "bits": 8, "lanes": 1 }, "options": {"hspace": 400, "bits": 8, "lanes": 1}
        }


+-------+------+-------------------------------------------------------+
| Field | Name | Description                                           |
+=======+======+=======================================================+
| [6:0] | ADDR | Write the USB address from USB `SET_ADDRESS` packets. |
+-------+------+-------------------------------------------------------+

