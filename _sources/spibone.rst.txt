SPIBONE
=======

Wishbone Bridge over SPI
------------------------

This module allows for accessing a Wishbone bridge over a 4-wire protocol.
All operations occur on byte boundaries, and are big-endian.

The device can take a variable amount of time to respond, so the host should
continue polling after the operation begins.  If the Wishbone bus is
particularly busy, such as during periods of heavy processing when the
CPU's icache is empty, responses can take many thousands of cycles.

The bridge core is designed to run at 1/4 the system clock.


4-Wire SPI Protocol
-------------------

The 4-wire SPI protocol does not require any pins to change direction, and
is therefore suitable for designs with level-shifters or without GPIOs that
can change direction.

While waiting for the response, the ``MISO`` line remains high.  As soon as
a response is available, the device pulls the `MISO` line low and clocks
out either a ``0x00`` or `0x01` byte indicating whether it's a READ or a WRITE
that is being answered.  Note that if the operation is fast enough, the
device will not pull the `MISO` line high and will immediately respond
with ``0x00`` or ``0x01``.

You can abort the operation by driving ``CS`` high.  However, if a WRITE or
READ has already been initiated then it will not be aborted.

.. wavedrom::
    :caption: 4-Wire SPI Operation

    { "signal": [
        ["Read",
            {  "name": 'MOSI',        "wave": 'x23...x|xxxxxx', "data": '0x01 [ADDRESS]'},
            {  "name": 'MISO',        "wave": 'x.....x|25...x', "data": '0x01 [DATA]'   },
            {  "name": 'CS',          "wave": 'x0.....|.....x', "data": '1 2 3'},
            {  "name": 'data bits',   "wave": 'xx2222x|x2222x', "data": '31:24 23:16 15:8 7:0 31:24 23:16 15:8 7:0'}
        ],
        {},
        ["Write",
            {  "name": 'MOSI',        "wave": 'x23...3...x|xx', "data": '0x00 [ADDRESS] [DATA]'},
            {  "name": 'MISO',        "wave": 'x.........1|2x', "data": '0x00'   },
            {  "name": 'CS',          "wave": 'x0.........|.x', "data": '1 2 3'},
            {  "name": 'data bits',   "wave": 'xx22222222x|xx', "data": '31:24 23:16 15:8 7:0 31:24 23:16 15:8 7:0'}
        ]
    ]}


